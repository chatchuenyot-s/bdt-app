/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, SuportTicket } from "@prisma/client";

export class SuportTicketServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SuportTicketFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuportTicketFindManyArgs>
  ): Promise<number> {
    return this.prisma.suportTicket.count(args);
  }

  async findMany<T extends Prisma.SuportTicketFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuportTicketFindManyArgs>
  ): Promise<SuportTicket[]> {
    return this.prisma.suportTicket.findMany(args);
  }
  async findOne<T extends Prisma.SuportTicketFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuportTicketFindUniqueArgs>
  ): Promise<SuportTicket | null> {
    return this.prisma.suportTicket.findUnique(args);
  }
  async create<T extends Prisma.SuportTicketCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuportTicketCreateArgs>
  ): Promise<SuportTicket> {
    return this.prisma.suportTicket.create<T>(args);
  }
  async update<T extends Prisma.SuportTicketUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuportTicketUpdateArgs>
  ): Promise<SuportTicket> {
    return this.prisma.suportTicket.update<T>(args);
  }
  async delete<T extends Prisma.SuportTicketDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuportTicketDeleteArgs>
  ): Promise<SuportTicket> {
    return this.prisma.suportTicket.delete(args);
  }
}
